# docs/openapi.yaml

openapi: 3.1.0

info:
  version: 1.0.0
  title: Contacts API
  description: API для керування контактами
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: Contacts
  - name: Auth

servers:
  - url: http://localhost:3000
  - url: https://nodejs-hw-mongodb-7-1it5.onrender.com

security:
  - bearerAuth: []

paths:
  /contacts:
    get:
      $ref: ../swagger/paths/contacts/get.yaml
    post:
      $ref: ../swagger/paths/contacts/post.yaml

  /contacts/{contactId}:
    get:
      $ref: ../swagger/paths/contacts/{id}/get.yaml
    patch:
      $ref: ../swagger/paths/contacts/{id}/patch.yaml
    delete:
      $ref: ../swagger/paths/contacts/{id}/delete.yaml

  /auth/signup:
    post:
      tags:
        - Auth
      summary: Реєстрація нового користувача
      operationId: signupUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSignup'
      responses:
        '201':
          description: Користувач успішно створений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
        '400':
          $ref: '#/components/responses/400'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Логін користувача
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
      responses:
        '200':
          description: Користувач успішно залогінений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
        '401':
          $ref: '#/components/responses/401'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Вихід користувача (logout)
      operationId: logoutUser
      security: []
      responses:
        '204':
          description: Успішний вихід
        '401':
          $ref: '#/components/responses/401'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Оновлення сесії користувача (refresh)
      operationId: refreshUserSession
      security: []
      responses:
        '200':
          description: Сесія успішно оновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
        '401':
          $ref: '#/components/responses/401'

  /auth/send-reset-email:
    post:
      tags:
        - Auth
      summary: Надіслати емейл для скидання пароля
      operationId: sendResetEmail
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestResetEmail'
      responses:
        '200':
          description: Емейл успішно надіслано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resetEmailResponse'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /auth/reset-pwd:
    post:
      tags:
        - Auth
      summary: Скидання пароля
      operationId: resetPassword
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPassword'
      responses:
        '200':
          description: Пароль успішно змінено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resetPasswordResponse'
        '401':
          $ref: '#/components/responses/401'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    userSignup:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: strongPassword123

    userLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: strongPassword123

    userResponse:
      type: object
      properties:
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "User created successfully!"
        data:
          type: object
          properties:
            _id:
              type: string
              example: 65ca67e7ae7f10c88b598384
            name:
              type: string
              example: John Doe
            email:
              type: string
              example: john@example.com
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    authResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          example: "jwt.token.here"

    requestResetEmail:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: john@example.com

    resetEmailResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "Reset password email was successfully sent"
        data:
          type: object
          example: {}

    resetPassword:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          example: "jwt.reset.token.here"
        password:
          type: string
          example: "newStrongPassword123"

    resetPasswordResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "Password has been successfully reset"
        data:
          type: object
          example: {}

  responses:
    400:
      description: Некоректні дані запиту
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: "Invalid request data"

    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: "Unauthorized"

    404:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              message:
                type: string
                example: "Resource not found"

    500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 500
              message:
                type: string
                example: "Internal server error"
