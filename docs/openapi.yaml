# docs/openapi.yaml

openapi: 3.1.0

info:
  version: 1.0.0
  title: Contacts API
  description: API для керування контактами
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: Contacts
  - name: Auth

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://nodejs-hw-mongodb-7-1it5.onrender.com
    description: Render deployment

security:
  - bearerAuth: []

paths:
  /contacts:
    get:
      tags: [Contacts]
      summary: Отримати список контактів
      operationId: getContacts
      security: [bearerAuth: []]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, email, phoneNumber]
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Успішне отримання контактів
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse200'
        '401':
          $ref: '#/components/responses/401'

    post:
      tags: [Contacts]
      summary: Створити новий контакт
      operationId: createContact
      security: [bearerAuth: []]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, phoneNumber]
              properties:
                name: { type: string, example: John Doe }
                email: { type: string, example: john@example.com }
                phoneNumber: { type: string, example: "+380991234567" }
                photo: { type: string, format: binary }
      responses:
        '201':
          description: Контакт створено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'

  /contacts/{contactId}:
    get:
      tags: [Contacts]
      summary: Отримати контакт за ID
      operationId: getContactById
      security: [bearerAuth: []]
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Успішне отримання контакту
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse200ById'
        '404':
          $ref: '#/components/responses/404'

    patch:
      tags: [Contacts]
      summary: Оновити контакт
      operationId: updateContact
      security: [bearerAuth: []]
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string, example: Jane Doe }
                email: { type: string, example: jane@example.com }
                phoneNumber: { type: string, example: "+380671112233" }
                photo: { type: string, format: binary }
      responses:
        '200':
          description: Контакт оновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse200Patched'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'

    delete:
      tags: [Contacts]
      summary: Видалити контакт
      operationId: deleteContact
      security: [bearerAuth: []]
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Контакт видалено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse200Deleted'
        '404':
          $ref: '#/components/responses/404'

  /auth/signup:
    post:
      tags: [Auth]
      summary: Реєстрація нового користувача
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: Користувач створений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse201'
        '400':
          $ref: '#/components/responses/400'

  /auth/login:
    post:
      tags: [Auth]
      summary: Логін користувача
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Успішний логін
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse200'
        '401':
          $ref: '#/components/responses/401'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Вихід користувача
      operationId: logout
      security: [bearerAuth: []]
      responses:
        '204':
          description: Успішний вихід
        '401':
          $ref: '#/components/responses/401'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Оновлення токена
      operationId: refresh
      security: [bearerAuth: []]
      responses:
        '200':
          description: Токен оновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse200'
        '401':
          $ref: '#/components/responses/401'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    Contact:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        email: { type: string }
        phoneNumber: { type: string }
        photo: { type: string }
        userId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ContactResponse200:
      type: object
      properties:
        status: { type: integer, example: 200 }
        message: { type: string, example: "Successfully found contacts!" }
        data: { $ref: '#/components/schemas/Contact' }

    ContactResponse200ById:
      type: object
      properties:
        status: { type: integer, example: 200 }
        message: { type: string, example: "Successfully found contact with id {contactId}!" }
        data: { $ref: '#/components/schemas/Contact' }

    ContactResponse200Patched:
      type: object
      properties:
        status: { type: integer, example: 200 }
        message: { type: string, example: "Successfully patched a contact!" }
        data: { $ref: '#/components/schemas/Contact' }

    ContactResponse200Deleted:
      type: object
      properties:
        status: { type: integer, example: 200 }
        message: { type: string, example: "Successfully deleted contact!" }
        data: { $ref: '#/components/schemas/Contact' }

    ContactResponse201:
      type: object
      properties:
        status: { type: integer, example: 201 }
        message: { type: string, example: "Successfully created a contact!" }
        data: { $ref: '#/components/schemas/Contact' }

    UserSignup:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string }
        email: { type: string }
        password: { type: string }

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email: { type: string }
        password: { type: string }

    UserResponse201:
      type: object
      properties:
        status: { type: integer, example: 201 }
        message: { type: string, example: "Successfully registered a user!" }
        data:
          type: object
          properties:
            _id: { type: string }
            name: { type: string }
            email: { type: string }

    AuthResponse200:
      type: object
      properties:
        status: { type: integer, example: 200 }
        message: { type: string, example: "Successfully logged in" }
        token: { type: string }

  responses:
    400:
      description: Некоректні дані запиту
      content:
        application/json:
          schema:
            type: object
            properties:
              status: { type: integer, example: 400 }
              message: { type: string, example: "Invalid request data" }

    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status: { type: integer, example: 401 }
              message: { type: string, example: "Unauthorized" }

    404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              status: { type: integer, example: 404 }
              message: { type: string, example: "Resource not found" }


             


